version: '3.8'

services:
  redis:
    image: redis/redis-stack:latest
    container_name: redis-memory-redis
    restart: unless-stopped
    ports:
      - "16379:6379"
      - "18001:8001"
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-stack-server
      --save 60 1
      --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - redis_memory_net

  api:
    build:
      context: https://github.com/redis-developer/agent-memory-server.git
      dockerfile: Dockerfile
    container_name: redis-memory-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PORT=8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LONG_TERM_MEMORY=True
      - WINDOW_SIZE=20
      - GENERATION_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - ENABLE_TOPIC_EXTRACTION=True
      - ENABLE_NER=True
      - DISABLE_AUTH=true  # Internal LAN only
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - redis_memory_net

  mcp:
    build:
      context: https://github.com/redis-developer/agent-memory-server.git
      dockerfile: Dockerfile
    container_name: redis-memory-mcp
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PORT=9000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LONG_TERM_MEMORY=True
      - WINDOW_SIZE=20
      - GENERATION_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - ENABLE_TOPIC_EXTRACTION=True
      - ENABLE_NER=True
      - DISABLE_AUTH=true
    depends_on:
      redis:
        condition: service_healthy
    command: ["uv", "run", "agent-memory", "mcp", "--mode", "sse"]
    networks:
      - redis_memory_net

  mcp-stdio:
    build:
      context: https://github.com/redis-developer/agent-memory-server.git
      dockerfile: Dockerfile
    container_name: redis-memory-mcp-stdio
    restart: unless-stopped
    stdin_open: true
    tty: true
    environment:
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LONG_TERM_MEMORY=True
      - WINDOW_SIZE=20
      - GENERATION_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - ENABLE_TOPIC_EXTRACTION=True
      - ENABLE_NER=True
      - DISABLE_AUTH=true
    depends_on:
      redis:
        condition: service_healthy
    command: ["uv", "run", "agent-memory", "mcp", "--mode", "stdio"]
    networks:
      - redis_memory_net

  task-worker:
    build:
      context: https://github.com/redis-developer/agent-memory-server.git
      dockerfile: Dockerfile
    container_name: redis-memory-task-worker
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GENERATION_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - ENABLE_TOPIC_EXTRACTION=True
      - ENABLE_NER=True
    depends_on:
      redis:
        condition: service_healthy
    command: ["uv", "run", "agent-memory", "task-worker", "--concurrency", "2"]
    networks:
      - redis_memory_net

  # Add this new service for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-memory-exporter
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - redis_memory_net

  prometheus:
    image: prom/prometheus:latest
    container_name: redis-memory-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configs/alerts.yml:/etc/prometheus/alerts.yml # Add this line
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - redis_memory_net

  backup:
    image: offen/docker-volume-backup:v2-latest
    container_name: redis-memory-backup
    restart: unless-stopped
    volumes:
      # Mount the Docker socket to inspect other containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume we want to back up (from the redis service)
      - redis_data:/volume/redis_data:ro
      # Mount a local path to store the backup archives
      - /opt/redis-memory/backups:/backup
    environment:
      # Back up the 'redis_data' volume from the 'redis-memory-redis' container
      - BACKUP_SOURCES=/volume/redis_data
      # Run the backup every day at 3:00 AM
      - BACKUP_CRON_EXPRESSION=0 3 * * *
      # Keep the last 7 daily backups
      - BACKUP_RETENTION_DAYS=7
      # Use tar.gz compression
      - BACKUP_COMPRESSION=GZIP
      - BACKUP_FILENAME=redis-backup-%Y-%m-%d_%H-%M-%S.tar.gz
    depends_on:
      - redis
    networks:
      - redis_memory_net

networks:
  redis_memory_net:
    driver: bridge

volumes:
  redis_data:
  prometheus_data: